/**
 * Generador de contrase√±as interactivo en Node.js
 * 
 * Este script permite al usuario generar una contrase√±a segura de manera interactiva,
 * eligiendo la longitud y los tipos de caracteres a incluir (may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos).
 * Utiliza la librer√≠a 'crypto' para asegurar la aleatoriedad de la contrase√±a.
 * 
 * Uso:
 *   Ejecuta el script con Node.js y responde a las preguntas en consola.
 * 
 */

const crypto = require("crypto"); // M√≥dulo para generaci√≥n segura de n√∫meros aleatorios
const readline = require("readline"); // M√≥dulo para entrada/salida por consola
const fs = require("fs"); // M√≥dulo para manipulaci√≥n de archivos
const { json } = require("stream/consumers");

console.clear(); // Limpia la consola al iniciar

// Configura la interfaz de lectura de consola
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Genera una contrase√±a aleatoria seg√∫n la longitud y el conjunto de caracteres dados.
 * 
 * @param {number} longitud - Longitud deseada de la contrase√±a.
 * @param {string} caracteres - Cadena con todos los caracteres posibles a usar.
 * @returns {string} Contrase√±a generada.
 */
function generarPassword(longitud, caracteres) {
  let password = "";
  for (let i = 0; i < longitud; i++) {
    const index = crypto.randomInt(0, caracteres.length); // Selecciona un √≠ndice aleatorio seguro
    password += caracteres[index];
  }
  return password;
}

/**
 * Realiza una pregunta al usuario y devuelve la respuesta como promesa.
 * 
 * @param {string} texto - Texto de la pregunta a mostrar.
 * @returns {Promise<string>} Respuesta del usuario.
 */
function pregunta(texto) {
  return new Promise(resolve => {
    rl.question(texto, (respuesta) => resolve(respuesta.trim()));
  });
}

/**
 * Funci√≥n principal que ejecuta el flujo interactivo del generador de contrase√±as.
 */
async function main() {
  console.log("üîê Generador de contrase√±as interactivo\n");

  // Pregunta la longitud de la contrase√±a
  let lengthStr = await pregunta("¬øCu√°ntos caracteres quieres? (default 12): ");
  let length = parseInt(lengthStr);
  if (isNaN(length) || length < 1) length = 12;

  // Pregunta qu√© tipos de caracteres incluir
  const mayus = await pregunta("¬øIncluir may√∫sculas? (s/n): ");
  const minus = await pregunta("¬øIncluir min√∫sculas? (s/n): ");
  const nums = await pregunta("¬øIncluir n√∫meros? (s/n): ");
  const simbolos = await pregunta("¬øIncluir s√≠mbolos? (s/n): ");

  // Construye el conjunto de caracteres seg√∫n las respuestas
  let caracteres = "";
  if (mayus.toLowerCase() === "s") caracteres += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  if (minus.toLowerCase() === "s") caracteres += "abcdefghijklmnopqrstuvwxyz";
  if (nums.toLowerCase() === "s") caracteres += "0123456789";
  if (simbolos.toLowerCase() === "s") caracteres += "!@#$%^&*()_+-=[]{};:,.<>?";

  // Verifica que al menos un tipo de car√°cter haya sido seleccionado
  if (!caracteres) {
    console.log("‚ùå Debes elegir al menos un tipo de car√°cter.");
    rl.close();
    return;
  }

  // Genera y muestra la contrase√±a
  const password = generarPassword(length, caracteres);

  const exportPassword = await pregunta('\n¬øDesea exportar la contrase√±a a un archivo JSON (s/n)? ¬ª¬ª ')

  if(exportPassword.toLowerCase() === "s") jsonExport(password);

  console.log("\n‚úÖ Contrase√±a generada:");
  console.log(password);
  console.log();

  rl.close();
}

/**
 * Exporta la contrase√±a generada a un archivo JSON, agreg√°ndola a una lista de contrase√±as existentes.
 * Si el archivo no existe, lo crea. Si existe, a√±ade la nueva contrase√±a al arreglo.
 * 
 * @param {string} password - Contrase√±a generada a guardar.
 */
function jsonExport(password) {
    fs.readFile("password.json", (err, data) => {
        let existingData = { passwords: [] };

        // Si hay error distinto a archivo no encontrado, mostrarlo
        if (err && err.code !== 'ENOENT') {
            console.error("Error al leer el archivo password.json:", err);
            return;
        }

        // Si hay datos, intentar parsear el JSON y obtener el arreglo de contrase√±as
        if (data) {
            try {
                existingData = JSON.parse(data);
                if (!Array.isArray(existingData.passwords)) {
                    existingData.passwords = [];
                }
            } catch (parseError) {
                console.error("Error al parsear el archivo JSON:", parseError);
                return;
            }
        }

        // A√±ade la nueva contrase√±a al arreglo
        existingData.passwords.push(password);

        // Guarda el objeto actualizado en el archivo JSON
        fs.writeFile("password.json", JSON.stringify(existingData, null, 2), (writeErr) => {
            if (writeErr) {
                console.error("Error al guardar la contrase√±a en JSON:", writeErr);
            } else {
                console.log("Contrase√±a guardada en password.json\n");
            }
        });
    });
}

// Ejecuta el programa principal
main();
